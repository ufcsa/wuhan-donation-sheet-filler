{"version":3,"sources":["App.js","inter.js","serviceWorker.js","index.js"],"names":["L","onSubmit","props","form","validateFields","force","err","fail","console","log","getFieldsValue","obj","method","axios","post","then","res","status","success","state","this","getFieldProps","getFieldError","style","textAlign","rules","required","message","error","placeholder","type","data","label","value","title","cols","extra","okText","dismissText","Item","arrow","onClick","React","Component","App","createForm","interceptors","request","use","config","loading","response","hide","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qbAKMA,E,YACL,aAAe,IAAD,8BACb,+CAKDC,SAAW,WACV,EAAKC,MAAMC,KAAKC,eAAe,CAAEC,OAAO,IAAQ,SAAAC,GAC/C,GAAKA,EAuBJ,IAAMC,KAAK,oBAAqB,OAvBvB,CACTC,QAAQC,IAAI,EAAKP,MAAMC,KAAKO,kBAC5B,IAAMC,EAAG,eACL,EAAKT,MAAMC,KAAKO,iBADX,CAERE,OAAQ,EAAKV,MAAMC,KAAKO,iBAAiBE,OAAO,KAEjDJ,QAAQC,IAAIE,GACZE,IAAMC,KAAK,cAAeH,GAAKI,MAAK,SAAAC,GACnCR,QAAQC,IAAI,YACRH,GACHE,QAAQC,IAAI,OACZ,IAAMF,KAAK,iBAAkB,IAEV,MAAfS,EAAIC,QACPT,QAAQC,IAAI,OACZ,IAAMF,KAAK,iBAAkB,KAE7BC,QAAQC,IAAI,OACZ,IAAMS,QAAQ,uBAAwB,YAxB3C,EAAKC,MAAQ,CACZP,OAAQ,IAHI,E,sEAoCb,IADQ,EAmBiCQ,KAAKlB,MAAMC,KAA5CkB,EAnBA,EAmBAA,cAAeC,EAnBf,EAmBeA,cACvB,OACC,6BACC,wBAAIC,MAAO,CAAEC,UAAW,WAAxB,uBACA,2BACC,uCACKH,EAAc,OAAQ,CACzBI,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,gBAFrC,CAICC,QAASN,EAAc,QACvBO,YAAY,SALb,QASA,qCACCC,KAAK,UACDT,EAAc,SAAU,CAC3BI,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,gBAHrC,CAKCC,QAASN,EAAc,UACvBO,YAAY,WANb,UA6BA,qCACCE,KA9DU,CACb,CACCC,MAAO,QACPC,MAAO,SAER,CACCD,MAAO,WACPC,MAAO,YAER,CACCD,MAAO,SACPC,MAAO,UAER,CACCD,MAAO,QACPC,MAAO,UAgDLC,MAAM,iBACND,MAAOb,KAAKD,MAAMP,QACdS,EAAc,SAAU,CAC3BI,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,gBALrC,CAOCQ,KAAM,EACNC,MAAM,UACNC,OAAO,OACPC,YAAY,WAIZ,sBAAMC,KAAN,CAAWC,MAAM,cAAjB,WAED,uCACKnB,EAAc,OAAQ,CACzBI,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,gBAFrC,CAICC,QAASN,EAAc,QACvBO,YAAY,+BALb,QASA,sBAAMU,KAAN,KACC,uBAAQT,KAAK,UAAUW,QAASrB,KAAKnB,UAArC,iB,GA5HUyC,IAAMC,WAwIPC,EAFHC,cAAa7C,GCvIzBa,IAAMiC,aAAaC,QAAQC,KAAI,SAASC,GAEvC,OADA,IAAMC,QAAQ,UAAW,GAClBD,KAIRpC,IAAMiC,aAAaK,SAASH,KAAI,SAASC,GAGxC,OAFA,IAAMG,OAECH,KCDYI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,MAAK,SAAAkD,GACjCA,EAAaC,kB","file":"static/js/main.aab2ac64.chunk.js","sourcesContent":["import React from 'react';\nimport { List, InputItem, Button, Picker, Toast } from 'antd-mobile';\nimport { createForm } from 'rc-form';\nimport axios from 'axios';\n\nclass L extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tmethod: ''\n\t\t};\n\t}\n\tonSubmit = () => {\n\t\tthis.props.form.validateFields({ force: true }, err => {\n\t\t\tif (!err) {\n\t\t\t\tconsole.log(this.props.form.getFieldsValue());\n\t\t\t\tconst obj = {\n\t\t\t\t\t...this.props.form.getFieldsValue(),\n\t\t\t\t\tmethod: this.props.form.getFieldsValue().method[0]\n\t\t\t\t};\n\t\t\t\tconsole.log(obj);\n\t\t\t\taxios.post('/api/update', obj).then(res => {\n\t\t\t\t\tconsole.log('callback');\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tconsole.log('err');\n\t\t\t\t\t\tToast.fail('Update failed!', 5);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (res.status === 422) {\n\t\t\t\t\t\t\tconsole.log('err');\n\t\t\t\t\t\t\tToast.fail('Update failed!', 5);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log('suc');\n\t\t\t\t\t\t\tToast.success('Update successfully!', 5);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tToast.fail('Missing field(s)!', 2);\n\t\t\t}\n\t\t});\n\t};\n\trender() {\n\t\tconst mList = [\n\t\t\t{\n\t\t\t\tlabel: 'zelle',\n\t\t\t\tvalue: 'zelle'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'QuickPay',\n\t\t\t\tvalue: 'QuickPay'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'paypal',\n\t\t\t\tvalue: 'paypal'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Venmo',\n\t\t\t\tvalue: 'Venmo'\n\t\t\t}\n\t\t];\n\t\tconst { getFieldProps, getFieldError } = this.props.form;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h2 style={{ textAlign: 'center' }}>Wuhan Donation Info</h2>\n\t\t\t\t<List>\n\t\t\t\t\t<InputItem\n\t\t\t\t\t\t{...getFieldProps('name', {\n\t\t\t\t\t\t\trules: [{ required: true, message: 'Required!' }]\n\t\t\t\t\t\t})}\n\t\t\t\t\t\terror={!!getFieldError('name')}\n\t\t\t\t\t\tplaceholder='name'\n\t\t\t\t\t>\n\t\t\t\t\t\tName\n\t\t\t\t\t</InputItem>\n\t\t\t\t\t<InputItem\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t{...getFieldProps('amount', {\n\t\t\t\t\t\t\trules: [{ required: true, message: 'Required!' }]\n\t\t\t\t\t\t})}\n\t\t\t\t\t\terror={!!getFieldError('amount')}\n\t\t\t\t\t\tplaceholder='amount'\n\t\t\t\t\t>\n\t\t\t\t\t\tAmount\n\t\t\t\t\t</InputItem>\n\t\t\t\t\t{/* <InputItem\n\t\t\t\t\t\t{...getFieldProps('name', {\n\t\t\t\t\t\t\trules: [{ required: true, message: 'Required!' }]\n\t\t\t\t\t\t})}\n\t\t\t\t\t\terror={!!getFieldError('name')}\n\t\t\t\t\t\tplaceholder='name'\n\t\t\t\t\t>\n\t\t\t\t\t\tName\n\t\t\t\t\t</InputItem>\n\t\t\t\t\t<InputItem\n\t\t\t\t\t\t{...getFieldProps('name', {\n\t\t\t\t\t\t\trules: [{ required: true, message: 'Required!' }]\n\t\t\t\t\t\t})}\n\t\t\t\t\t\terror={!!getFieldError('name')}\n\t\t\t\t\t\tplaceholder='name'\n\t\t\t\t\t>\n\t\t\t\t\t\tName\n          </InputItem>\n           */}\n\t\t\t\t\t<Picker\n\t\t\t\t\t\tdata={mList}\n\t\t\t\t\t\ttitle='payment method'\n\t\t\t\t\t\tvalue={this.state.method}\n\t\t\t\t\t\t{...getFieldProps('method', {\n\t\t\t\t\t\t\trules: [{ required: true, message: 'Required!' }]\n\t\t\t\t\t\t})}\n\t\t\t\t\t\tcols={1}\n\t\t\t\t\t\textra='choices'\n\t\t\t\t\t\tokText='Done'\n\t\t\t\t\t\tdismissText='Cancel'\n\t\t\t\t\t\t// onChange={v => this.setState({ method: v })}\n\t\t\t\t\t\t// onOk={v => this.setState({ method: v })}\n\t\t\t\t\t>\n\t\t\t\t\t\t<List.Item arrow='horizontal'>Method</List.Item>\n\t\t\t\t\t</Picker>\n\t\t\t\t\t<InputItem\n\t\t\t\t\t\t{...getFieldProps('role', {\n\t\t\t\t\t\t\trules: [{ required: true, message: 'Required!' }]\n\t\t\t\t\t\t})}\n\t\t\t\t\t\terror={!!getFieldError('role')}\n\t\t\t\t\t\tplaceholder='role(student/staff/alumni)'\n\t\t\t\t\t>\n\t\t\t\t\t\tName\n\t\t\t\t\t</InputItem>\n\t\t\t\t\t<List.Item>\n\t\t\t\t\t\t<Button type='primary' onClick={this.onSubmit}>\n\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</List.Item>\n\t\t\t\t</List>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst App = createForm()(L);\n\nexport default App;\n","import axios from 'axios';\nimport { Toast } from 'antd-mobile';\n\n//intercept requetsts\naxios.interceptors.request.use(function(config) {\n\tToast.loading('loading', 0);\n\treturn config;\n});\n\n//intercept response\naxios.interceptors.response.use(function(config) {\n\tToast.hide();\n\n\treturn config;\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './inter';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}